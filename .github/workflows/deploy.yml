name: Deploy Todo App to AWS â€“ Blue-Green Strategy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set AWS Credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region = us-east-1" > ~/.aws/credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install Terraform CLI
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg  | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg >/dev/null
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com  $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform -y

      - name: Install AWS CLI v2
        run: |
          # Install dependencies
          sudo apt update && sudo apt install -y unzip curl

          # Download AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-extras-linux-x86_64.zip " -o "awscliv2.zip"

          # Unzip and install
          unzip awscliv2.zip
          sudo ./aws/install --update

          # Verify installation
          aws --version

      - name: Ensure S3 Bucket Exists & Init Terraform
        id: terraform-init
        run: |
          BUCKET_NAME="todo-app-state-bucket"
          REGION="us-east-1"

          # Check if bucket exists
          BUCKET_EXISTS=$(aws s3api head-bucket --bucket "$BUCKET_NAME" 2>&1 || echo "not-found")

          if [[ "$BUCKET_EXISTS" == *"404"* ]]; then
            echo "Bucket $BUCKET_NAME not found. Creating it..."
            aws s3api create-bucket \
              --bucket "$BUCKET_NAME" \
              --region "$REGION" \
              --create-bucket-configuration LocationConstraint=$REGION
            echo "âœ… Created S3 bucket: $BUCKET_NAME"
          else
            echo "Bucket $BUCKET_NAME already exists."
          fi

          # Terraform Init with dynamic backend config
          cd terraform
          terraform init \
            -backend-config="bucket=$BUCKET_NAME" \
            -backend-config="key=todo-devops-suite/terraform.tfstate" \
            -backend-config="region=$REGION" \
            -backend-config="skip_region_validation=true" \
            -backend-config="skip_credentials_validation=true" \
            -backend-config="skip_requesting_account_id=true"

          terraform apply -auto-approve \
            -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var "key_pair_name=${{ secrets.KEY_PAIR_NAME }}"

      - name: Extract Public IP
        id: ip
        run: |
          INSTANCE_IP=$(terraform output -raw public_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

      - name: Wait for SSH
        run: sleep 150

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Update system
            sudo apt update -y

            # Install Docker
            sudo apt install -y docker.io

            # Start and enable Docker service
            sudo systemctl start docker
            sudo systemctl enable docker

            # Add ubuntu user to docker group
            sudo usermod -aG docker ubuntu

            # Install Docker Compose
            sudo apt install -y docker-compose

            # Clone repo
            if [ ! -d "todo-devops-suite" ]; then
              git clone https://github.com/Sachin-960/todo-devops-suite.git  todo-devops-suite
            else
              cd todo-devops-suite && git pull origin main
            fi

            # Make scripts executable
            chmod +x todo-devops-suite/scripts/*.sh

            # Run blue-green deployment
            cd todo-devops-suite
            sudo mkdir -p /opt/todo
            echo "blue" | sudo tee /opt/todo/current > /dev/null
            ./scripts/deploy.sh

      - name: Show Success Message
        run: |
          echo ""
          echo "âœ… App deployed successfully!"
          echo "ðŸ‘‰ Access your app at: http://${{ env.INSTANCE_IP }}:3000"
          echo ""

      - name: Cleanup on Failure
        if: ${{ failure() }}
        run: |
          echo "Build failed. Destroying infrastructure..."
          cd terraform
          terraform destroy -auto-approve \
            -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var "key_pair_name=${{ secrets.KEY_PAIR_NAME }}"